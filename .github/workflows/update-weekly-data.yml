name: Update Weekly Data Sources

# Run weekly on Sunday at midnight UTC for HDX and WFP data
on:
  schedule:
    # Runs at 00:00 UTC every Sunday
    - cron: '0 0 * * 0'
  
  # Allow manual trigger from GitHub Actions tab
  workflow_dispatch:

jobs:
  update-weekly-data:
    runs-on: ubuntu-latest
    
    steps:
      # 1. Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # 2. Setup Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
      
      # 3. Install dependencies
      - name: Install dependencies
        run: npm ci
      
      # 4. Fetch HDX CKAN data
      - name: Fetch HDX CKAN data
        id: fetch_hdx
        run: |
          echo "Fetching HDX CKAN data..."
          if node scripts/fetch-hdx-ckan-data.js; then
            echo "‚úÖ HDX data fetched successfully"
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "‚ùå HDX data fetch failed"
            echo "success=false" >> $GITHUB_OUTPUT
          fi
        env:
          HDX_API_KEY: ${{ secrets.HDX_API_KEY }}
          NODE_ENV: production
        continue-on-error: true
      
      # 5. Fetch WFP data (if available)
      # Note: WFP data fetcher may need to be implemented
      - name: Fetch WFP data
        id: fetch_wfp
        run: |
          echo "Checking for WFP data fetcher..."
          if [ -f "scripts/fetch-wfp-data.js" ]; then
            echo "Fetching WFP data..."
            if node scripts/fetch-wfp-data.js; then
              echo "‚úÖ WFP data fetched successfully"
              echo "success=true" >> $GITHUB_OUTPUT
            else
              echo "‚ùå WFP data fetch failed"
              echo "success=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚ö†Ô∏è WFP data fetcher not yet implemented"
            echo "success=skipped" >> $GITHUB_OUTPUT
          fi
        env:
          NODE_ENV: production
        continue-on-error: true
      
      # 6. Transform to unified format
      - name: Populate unified data
        run: npm run populate-unified
        continue-on-error: true
      
      # 7. Run data validation
      - name: Validate data quality
        run: node scripts/validate-data.js
        continue-on-error: true
      
      # 8. Update global manifest
      - name: Update manifest
        run: node scripts/generate-manifest.js
        continue-on-error: true
      
      # 9. Check if data changed
      - name: Check for changes
        id: check_changes
        run: |
          if git diff --quiet public/data/hdx/ public/data/wfp/ public/data/unified/ public/data/manifest.json; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "‚ÑπÔ∏è No data changes detected"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "‚úÖ Data changes detected"
            # Show what changed
            git diff --stat public/data/hdx/ public/data/wfp/ public/data/unified/ public/data/manifest.json
          fi
      
      # 10. Commit and push if data changed
      - name: Commit and push changes
        if: steps.check_changes.outputs.changed == 'true'
        run: |
          git config --local user.name "Weekly Data Bot"
          git config --local user.email "weekly-bot@palboard.net"
          git add public/data/hdx/
          git add public/data/wfp/
          git add public/data/unified/
          git add public/data/manifest.json
          git add public/data/validation-report.json
          git add public/data/data-collection-summary.json
          git commit -m "ü§ñ Auto-update weekly data (HDX, WFP + Unified): $(date -u '+%Y-%m-%d %H:%M UTC')"
          git push
      
      # 11. Summary
      - name: Summary
        run: |
          echo "üìä Weekly Data Update Summary"
          echo "================================"
          
          if [ "${{ steps.fetch_hdx.outputs.success }}" == "true" ]; then
            echo "‚úÖ HDX CKAN: Success"
          else
            echo "‚ùå HDX CKAN: Failed (check logs)"
          fi
          
          if [ "${{ steps.fetch_wfp.outputs.success }}" == "true" ]; then
            echo "‚úÖ WFP: Success"
          elif [ "${{ steps.fetch_wfp.outputs.success }}" == "skipped" ]; then
            echo "‚ö†Ô∏è WFP: Skipped (not implemented)"
          else
            echo "‚ùå WFP: Failed (check logs)"
          fi
          
          echo "================================"
          
          if [ "${{ steps.check_changes.outputs.changed }}" == "true" ]; then
            echo "‚úÖ Data updated and pushed to repository"
            echo "üìä Netlify will automatically deploy the changes"
            echo "üîÑ Unified data transformed and enriched"
          else
            echo "‚ÑπÔ∏è No data changes - skipping commit"
          fi
      
      # 12. Upload validation report as artifact
      - name: Upload validation report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: validation-report-weekly
          path: public/data/validation-report.json
          retention-days: 14
      
      # 13. Upload summary report as artifact
      - name: Upload summary report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: summary-report-weekly
          path: public/data/data-collection-summary.json
          retention-days: 14
      
      # 14. Upload logs as artifact
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: logs-weekly
          path: data-collection.log
          retention-days: 14
